---
interface Props {
  heading?: string;
  description?: string;
  items: Array<{
    image: string;
    title: string;
    description: string;
    href?: string;
  }>;
  autoplay?: boolean;
  showDots?: boolean;
  showArrows?: boolean;
  theme?: 'default' | 'gold' | 'emerald';
}

const {
  heading,
  description,
  items,
  autoplay = true,
  showDots = true,
  showArrows = true,
  theme = 'default'
} = Astro.props;

const themeConfig = {
  default: {
    background: 'bg-gray-50',
    accent: 'text-blue-600'
  },
  gold: {
    background: 'bg-amber-50',
    accent: 'text-amber-600'
  },
  emerald: {
    background: 'bg-emerald-50',
    accent: 'text-emerald-600'
  }
};

const currentTheme = themeConfig[theme as keyof typeof themeConfig];
---

<section class={`py-20 ${currentTheme.background}`}>
  <div class="container px-6">
    {(heading || description) && (
      <div class="text-center mb-16">
        {heading && (
          <h2 class="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
            {heading}
          </h2>
        )}
        {description && (
          <p class="text-xl text-gray-600 max-w-3xl mx-auto">
            {description}
          </p>
        )}
      </div>
    )}

    <div class="relative max-w-6xl mx-auto">
      <!-- Carousel Container -->
      <div class="carousel-container overflow-hidden rounded-2xl" data-autoplay={autoplay}>
        <div class="carousel-track flex transition-transform duration-700 ease-in-out">
          {items.map((item: Props['items'][0], index: number) => (
            <div class="carousel-slide min-w-full sm:min-w-1/2 lg:min-w-1/3 px-3">
              <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
                <div class="relative h-64 overflow-hidden">
                  <img 
                    src={item.image} 
                    alt={item.title}
                    class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                  />
                  <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                </div>
                <div class="p-6">
                  <h3 class="text-xl font-bold text-gray-900 mb-3">
                    {item.title}
                  </h3>
                  <p class="text-gray-600 leading-relaxed">
                    {item.description}
                  </p>
                  {item.href && (
                    <a 
                      href={item.href} 
                      class="inline-flex items-center mt-4 text-blue-600 hover:text-blue-700 font-medium group"
                    >
                      Learn More
                      <svg class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                      </svg>
                    </a>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Navigation Arrows -->
      {showArrows && (
        <div class="absolute inset-y-0 left-0 flex items-center">
          <button class="carousel-prev -ml-12 w-10 h-10 rounded-full bg-white shadow-lg flex items-center justify-center hover:bg-gray-50 transition-colors">
            <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
        </div>
      )}

      {showArrows && (
        <div class="absolute inset-y-0 right-0 flex items-center">
          <button class="carousel-next -mr-12 w-10 h-10 rounded-full bg-white shadow-lg flex items-center justify-center hover:bg-gray-50 transition-colors">
            <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
      )}

      <!-- Dots Indicator -->
      {showDots && (
        <div class="flex justify-center mt-8 space-x-2">
          {items.map((_: Props['items'][0], index: number) => (
            <button 
              class="carousel-dot w-3 h-3 rounded-full bg-gray-300 hover:bg-gray-400 transition-colors"
              data-slide={index}
            ></button>
          ))}
        </div>
      )}
    </div>
  </div>
</section>

<script>
  // Simple carousel functionality
  document.addEventListener('DOMContentLoaded', function() {
    const carousels = document.querySelectorAll('.carousel-container');
    
    carousels.forEach(carousel => {
      const track = carousel.querySelector('.carousel-track') as HTMLElement;
      const slides = carousel.querySelectorAll('.carousel-slide');
      const dots = carousel.querySelectorAll('.carousel-dot');
      const parent = carousel.parentElement;
      const prevBtn = parent?.querySelector('.carousel-prev') as HTMLButtonElement;
      const nextBtn = parent?.querySelector('.carousel-next') as HTMLButtonElement;
      
      if (!track || !parent) return;
      
      let currentSlide = 0;
      const totalSlides = slides.length;
      
      function updateCarousel() {
        const slideWidth = (slides[0] as HTMLElement).offsetWidth;
        track.style.transform = `translateX(-${currentSlide * slideWidth}px)`;
        
        // Update dots
        dots.forEach((dot, index) => {
          dot.classList.toggle('bg-blue-600', index === currentSlide);
          dot.classList.toggle('bg-gray-300', index !== currentSlide);
        });
      }
      
      function nextSlide() {
        currentSlide = (currentSlide + 1) % totalSlides;
        updateCarousel();
      }
      
      function prevSlide() {
        currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
        updateCarousel();
      }
      
      // Event listeners
      if (nextBtn) nextBtn.addEventListener('click', nextSlide);
      if (prevBtn) prevBtn.addEventListener('click', prevSlide);
      
      dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          currentSlide = index;
          updateCarousel();
        });
      });
      
      // Auto-play
      if ((carousel as HTMLElement).dataset.autoplay === 'true') {
        setInterval(nextSlide, 5000);
      }
      
      // Initialize
      updateCarousel();
    });
  });
</script>
