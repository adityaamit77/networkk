---
import Heading from '../ui/Heading.astro';

export interface Props {
  heading: string;
  description?: string;
  fields: Array<{
    name: string;
    label: string;
    type: 'text' | 'email' | 'tel' | 'textarea' | 'select' | 'checkbox';
    required: boolean;
    options?: Array<{
      label: string;
      value: string;
    }>;
  }>;
  submitLabel?: string;
  successMessage?: string;
  redirectTo?: string;
}

const {
  heading,
  description,
  fields,
  submitLabel = 'Submit',
  successMessage = 'Thank you for your message. We will get back to you shortly.',
  redirectTo,
} = Astro.props;
---

<section class="section bg-white py-16 md:py-24">
  <div class="container max-w-4xl">
    <!-- Header -->
    {(heading || description) && (
      <div class="text-center max-w-3xl mx-auto mb-12">
        {heading && (
          <Heading level={2} class="mb-4">
            {heading}
          </Heading>
        )}
        {description && (
          <p class="text-xl text-gray-600">
            {description}
          </p>
        )}
      </div>
    )}
    
    <!-- Form -->
    <form
      id="contact-form"
      method="post"
      action="/api/contact-new"
      data-redirect-to={redirectTo ?? ''}
      class="bg-white rounded-xl shadow-sm p-8 md:p-10"
    >
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        {fields.map((field) => (
          <div class={field.type === 'textarea' ? 'md:col-span-2' : ''}>
            {field.type !== 'checkbox' && (
              <label for={field.name} class="block text-sm font-medium text-gray-700 mb-1">
                {field.label} {field.required && <span class="text-red-500">*</span>}
              </label>
            )}
            
            {field.type === 'text' && (
              <div>
                <input 
                  type="text" 
                  id={field.name} 
                  name={field.name} 
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required={field.required}
                  minlength={field.name === 'name' || field.name === 'company' || field.name === 'jobTitle' ? 2 : undefined}
                  placeholder={field.name === 'name' ? 'Enter your full name' : 
                             field.name === 'company' ? 'Your company name' :
                             field.name === 'jobTitle' ? 'Your job title' : undefined}
                />
                <div id={`${field.name}-error`} class="hidden mt-1 text-sm text-red-600"></div>
              </div>
            )}
            
            {field.type === 'email' && (
              <div>
                <input 
                  type="email" 
                  id={field.name} 
                  name={field.name} 
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required={field.required}
                  placeholder="your.email@company.com"
                />
                <div id={`${field.name}-error`} class="hidden mt-1 text-sm text-red-600"></div>
              </div>
            )}
            
            {field.type === 'tel' && (
              <div>
                <input 
                  type="tel" 
                  id={field.name} 
                  name={field.name} 
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required={field.required}
                  placeholder="+91 98765 43210 or 9876543210"
                  title="Please enter a valid phone number (optional)"
                />
                <div id={`${field.name}-error`} class="hidden mt-1 text-sm text-red-600"></div>
              </div>
            )}
            
            {field.type === 'textarea' && (
              <div>
                <textarea 
                  id={field.name} 
                  name={field.name} 
                  rows="5"
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required={field.required}
                  minlength="5"
                  placeholder="Tell us about your requirements..."
                ></textarea>
                <div id={`${field.name}-error`} class="hidden mt-1 text-sm text-red-600"></div>
              </div>
            )}
            
            {field.type === 'select' && field.options && (
              <div>
                <select 
                  id={field.name} 
                  name={field.name} 
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required={field.required}
                >
                  <option value="">Please select</option>
                  {field.options.map((option) => (
                    <option value={option.value}>{option.label}</option>
                  ))}
                </select>
                <div id={`${field.name}-error`} class="hidden mt-1 text-sm text-red-600"></div>
              </div>
            )}
            
            {field.type === 'checkbox' && (
              <div class="mt-2">
                <div class="flex items-start">
                  <input 
                    type="checkbox" 
                    id={field.name} 
                    name={field.name} 
                    value="true"
                    class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mt-1"
                    required={field.required}
                  />
                  <label for={field.name} class="ml-2 block text-sm text-gray-700">
                    {field.label}
                  </label>
                </div>
                <div id={`${field.name}-error`} class="hidden mt-1 text-sm text-red-600"></div>
              </div>
            )}
          </div>
        ))}
      </div>
      
      <div class="mt-8 text-center">
        <button 
          type="submit"
          id="submit-button"
          class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <span id="submit-text">{submitLabel}</span>
          <svg id="loading-spinner" class="hidden animate-spin ml-2 -mr-1 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </button>
      </div>
      
      <div id="form-success" class="hidden mt-6 p-4 bg-green-50 text-green-800 rounded-md text-center">
        {successMessage}
      </div>
      
      <div id="form-error" class="hidden mt-6 p-4 bg-red-50 text-red-800 rounded-md text-center">
        <span id="error-message">Something went wrong. Please try again.</span>
      </div>
    </form>
  </div>
  </div>
</section>

<script>
  import { trackEvent } from '../../lib/analytics';

  // Handle contact form submission
  const form = document.getElementById('contact-form') as HTMLFormElement;
  const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
  const submitText = document.getElementById('submit-text');
  const loadingSpinner = document.getElementById('loading-spinner');
  const successMessage = document.getElementById('form-success');
  const errorMessage = document.getElementById('form-error');
  const errorMessageText = document.getElementById('error-message');

  if (form && submitButton) {
    const redirectTo = (form.getAttribute('data-redirect-to') || '').trim() || null;

    // Validation functions for each field
    const showFieldError = (fieldName: string, message: string) => {
      const errorDiv = document.getElementById(`${fieldName}-error`);
      const field = form.querySelector(`[name="${fieldName}"]`) as HTMLElement;
      
      if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
      }
      
      if (field) {
        field.classList.add('border-red-500');
        field.classList.remove('border-gray-300');
      }
    };
    
    const hideFieldError = (fieldName: string) => {
      const errorDiv = document.getElementById(`${fieldName}-error`);
      const field = form.querySelector(`[name="${fieldName}"]`) as HTMLElement;
      
      if (errorDiv) {
        errorDiv.classList.add('hidden');
      }
      
      if (field) {
        field.classList.remove('border-red-500');
        field.classList.add('border-gray-300');
      }
    };
    
    const validateField = (fieldName: string, value: string) => {
      switch (fieldName) {
        case 'name':
          if (!value.trim() || value.trim().length < 2) {
            showFieldError('name', 'Name must be at least 2 characters long');
            return false;
          }
          break;
          
        case 'email':
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!value.trim() || !emailRegex.test(value.trim())) {
            showFieldError('email', 'Please provide a valid email address');
            return false;
          }
          break;
          
        case 'phone':
          if (value.trim()) {
            const cleaned = value.replace(/[^\d+]/g, '');
            const phoneRegex = /^(\+91|91)?[6-9]\d{9}$|^\+?[1-9]\d{7,14}$/;
            if (!phoneRegex.test(cleaned)) {
              showFieldError('phone', 'Please provide a valid phone number (e.g., +91 98765 43210)');
              return false;
            }
          }
          break;
          
        case 'company':
          if (!value.trim() || value.trim().length < 2) {
            showFieldError('company', 'Company name is required (at least 2 characters)');
            return false;
          }
          break;
          
        case 'jobTitle':
          if (!value.trim() || value.trim().length < 2) {
            showFieldError('jobTitle', 'Job title is required (at least 2 characters)');
            return false;
          }
          break;
          
        case 'service':
          if (!value.trim()) {
            showFieldError('service', 'Please select a service of interest');
            return false;
          }
          break;
          
        case 'message':
          if (!value.trim() || value.trim().length < 5) {
            showFieldError('message', 'Message must be at least 5 characters long');
            return false;
          }
          break;
      }
      
      hideFieldError(fieldName);
      return true;
    };
    
    const validateConsent = () => {
      const consentCheckbox = form.querySelector('input[name="consent"]') as HTMLInputElement;
      if (!consentCheckbox?.checked) {
        showFieldError('consent', 'Please agree to the privacy policy to continue');
        return false;
      }
      hideFieldError('consent');
      return true;
    };

    // Add real-time validation listeners
    const addValidationListeners = () => {
      const fields = ['name', 'email', 'phone', 'company', 'jobTitle', 'service', 'message'];
      
      fields.forEach(fieldName => {
        const field = form.querySelector(`[name="${fieldName}"]`) as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
        if (field) {
          // Validate on blur (when user leaves the field)
          field.addEventListener('blur', () => {
            validateField(fieldName, field.value);
          });
          
          // Validate on input for immediate feedback (with debounce)
          let timeout: NodeJS.Timeout;
          field.addEventListener('input', () => {
            clearTimeout(timeout);
            timeout = setTimeout(() => {
              if (field.value.trim()) { // Only validate if field has content
                validateField(fieldName, field.value);
              } else if (fieldName !== 'phone') { // Phone is optional
                hideFieldError(fieldName); // Clear error if field is empty (except required fields will show error on blur)
              }
            }, 500); // 500ms debounce
          });
        }
      });
      
      // Special handling for consent checkbox
      const consentCheckbox = form.querySelector('input[name="consent"]') as HTMLInputElement;
      if (consentCheckbox) {
        consentCheckbox.addEventListener('change', validateConsent);
      }
    };
    
    // Initialize validation listeners
    addValidationListeners();

    // Complete form validation function
    const validateCompleteForm = () => {
      const fields = ['name', 'email', 'phone', 'company', 'jobTitle', 'service', 'message'];
      let isValid = true;
      
      fields.forEach(fieldName => {
        const field = form.querySelector(`[name="${fieldName}"]`) as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
        if (field && !validateField(fieldName, field.value)) {
          isValid = false;
        }
      });
      
      if (!validateConsent()) {
        isValid = false;
      }
      
      return isValid;
    };

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Reset messages
      successMessage?.classList.add('hidden');
      errorMessage?.classList.add('hidden');
      
      // Client-side validation
      if (!validateCompleteForm()) {
        if (errorMessage && errorMessageText) {
          errorMessageText.innerHTML = `
            <strong>Please fix the errors shown above and try again.</strong>
          `;
          errorMessage.classList.remove('hidden');
          errorMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
        return;
      }
      
      // Show loading state
      submitButton.disabled = true;
      if (submitText) submitText.textContent = 'Sending...';
      loadingSpinner?.classList.remove('hidden');
      
      try {
        // Track form submission
        trackEvent('form_submit', { form: 'contact' });
        
        // Get form data
        const formData = new FormData(form);
        
        // For static deployment, try multiple submission methods
        let response;
        let result;
        
        try {
          // Try the API endpoint first (for hybrid mode)
          response = await fetch('/api/contact-new', {
            method: 'POST',
            body: formData
          });
          
          if (response.ok) {
            result = await response.json();
          } else {
            throw new Error('API not available');
          }
        } catch (error) {
          // Fallback: Submit to a working contact form service
          console.log('API not available, using contact form fallback');
          
          // Create a simple form submission to Formspree (create account first)
          const contactData = {
            name: formData.get('name'),
            email: formData.get('email'),
            phone: formData.get('phone'),
            company: formData.get('company'),
            jobTitle: formData.get('jobTitle'),
            service: formData.get('service'),
            message: formData.get('message'),
            _subject: `New Contact Form Submission from ${formData.get('name')} - Networkk`,
            _template: 'table'
          };
          
          // Try Formspree with proper setup
          try {
            response = await fetch('https://formspree.io/f/mdknnddj', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(contactData)
            });
            
            if (response.ok) {
              result = { success: true, message: 'Thank you for your message. We will get back to you within 24 hours.' };
            } else {
              throw new Error('Formspree submission failed');
            }
          } catch (formspreeError) {
            // Final fallback: mailto link
            const name = formData.get('name');
            const email = formData.get('email');
            const phone = formData.get('phone');
            const company = formData.get('company');
            const jobTitle = formData.get('jobTitle');
            const service = formData.get('service');
            const message = formData.get('message');
            
            const emailBody = `New Contact Form Submission from Networkk Website

Name: ${name}
Email: ${email}
Phone: ${phone}
Company: ${company}
Job Title: ${jobTitle}
Service of Interest: ${service}

Message:
${message}

--
This inquiry was submitted through the contact form at https://www.networkk.in/contact`;
            
            const mailtoUrl = `mailto:support@networkk.in?subject=New Contact Form Submission - ${name}&body=${encodeURIComponent(emailBody)}`;
            
            // Open email client
            window.open(mailtoUrl, '_blank');
            
            result = { 
              success: true, 
              message: 'Your email client will open with your inquiry. Please send the email to complete your submission.' 
            };
          }
        }
        
        if (result.success) {
          // Show success message
          if (successMessage) {
            successMessage.classList.remove('hidden');
            successMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          }
          
          // Reset form
          form.reset();
          
          // Track successful submission
          trackEvent('form_success', { form: 'contact' });
          
        } else {
          throw new Error(result.error || 'Submission failed');
        }
        
      } catch (error) {
        console.error('Form submission error:', error);
        
        // Show simple error message
        if (errorMessage && errorMessageText) {
          errorMessageText.innerHTML = `
            <strong>Form submission failed.</strong><br>
            Please try again or contact us directly:<br>
            <small class="mt-2 block">
            Email: <a href="mailto:support@networkk.in" class="underline">support@networkk.in</a><br>
            Phone: <a href="tel:+919266721935" class="underline">+91 92667 21935</a></small>
          `;
          errorMessage.classList.remove('hidden');
          errorMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
        
        // Track error
        trackEvent('form_error', { 
          form: 'contact', 
          error: error instanceof Error ? error.message : 'Unknown error' 
        });
        
      } finally {
        // Reset loading state
        submitButton.disabled = false;
        if (submitText) submitText.textContent = 'Submit Inquiry';
        loadingSpinner?.classList.add('hidden');
      }
    });
  }
</script>