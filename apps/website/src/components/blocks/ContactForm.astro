---
import Heading from '../ui/Heading.astro';

export interface Props {
  heading: string;
  description?: string;
  fields: Array<{
    name: string;
    label: string;
    type: 'text' | 'email' | 'tel' | 'textarea' | 'select' | 'checkbox';
    required: boolean;
    options?: Array<{
      label: string;
      value: string;
    }>;
  }>;
  submitLabel?: string;
  successMessage?: string;
  redirectTo?: string;
}

const {
  heading,
  description,
  fields,
  submitLabel = 'Submit',
  successMessage = 'Thank you for your message. We will get back to you shortly.',
  redirectTo,
} = Astro.props;
---

<section class="section bg-white py-16 md:py-24">
  <div class="container max-w-4xl">
    <!-- Header -->
    {(heading || description) && (
      <div class="text-center max-w-3xl mx-auto mb-12">
        {heading && (
          <Heading level={2} class="mb-4">
            {heading}
          </Heading>
        )}
        {description && (
          <p class="text-xl text-gray-600">
            {description}
          </p>
        )}
      </div>
    )}
    
    <!-- Form -->
    <form
      id="contact-form"
      method="post"
      action="/api/contact"
      data-redirect-to={redirectTo ?? ''}
      class="bg-white rounded-xl shadow-sm p-8 md:p-10"
    >
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        {fields.map((field) => (
          <div class={field.type === 'textarea' ? 'md:col-span-2' : ''}>
            <label for={field.name} class="block text-sm font-medium text-gray-700 mb-1">
              {field.label} {field.required && <span class="text-red-500">*</span>}
            </label>
            
            {field.type === 'text' && (
              <input 
                type="text" 
                id={field.name} 
                name={field.name} 
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                required={field.required}
              />
            )}
            
            {field.type === 'email' && (
              <input 
                type="email" 
                id={field.name} 
                name={field.name} 
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                required={field.required}
              />
            )}
            
            {field.type === 'tel' && (
              <input 
                type="tel" 
                id={field.name} 
                name={field.name} 
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                required={field.required}
              />
            )}
            
            {field.type === 'textarea' && (
              <textarea 
                id={field.name} 
                name={field.name} 
                rows="5"
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                required={field.required}
              ></textarea>
            )}
            
            {field.type === 'select' && field.options && (
              <select 
                id={field.name} 
                name={field.name} 
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                required={field.required}
              >
                <option value="">Please select</option>
                {field.options.map((option) => (
                  <option value={option.value}>{option.label}</option>
                ))}
              </select>
            )}
            
            {field.type === 'checkbox' && (
              <div class="flex items-start mt-2">
                <input 
                  type="checkbox" 
                  id={field.name} 
                  name={field.name} 
                  class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mt-1"
                  required={field.required}
                />
                <label for={field.name} class="ml-2 block text-sm text-gray-700">
                  {field.label}
                </label>
              </div>
            )}
          </div>
        ))}
      </div>
      
      <div class="mt-8 text-center">
        <button 
          type="submit"
          id="submit-button"
          class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <span id="submit-text">{submitLabel}</span>
          <svg id="loading-spinner" class="hidden animate-spin ml-2 -mr-1 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </button>
      </div>
      
      <div id="form-success" class="hidden mt-6 p-4 bg-green-50 text-green-800 rounded-md text-center">
        {successMessage}
      </div>
      
      <div id="form-error" class="hidden mt-6 p-4 bg-red-50 text-red-800 rounded-md text-center">
        <span id="error-message">Something went wrong. Please try again.</span>
      </div>
    </form>
  </div>
    </form>
  </div>
</section>

<script>
  import { trackEvent } from '../../lib/analytics';

  // Handle contact form submission
  const form = document.getElementById('contact-form') as HTMLFormElement;
  const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
  const submitText = document.getElementById('submit-text');
  const loadingSpinner = document.getElementById('loading-spinner');
  const successMessage = document.getElementById('form-success');
  const errorMessage = document.getElementById('form-error');
  const errorMessageText = document.getElementById('error-message');

  if (form && submitButton) {
    const redirectTo = (form.getAttribute('data-redirect-to') || '').trim() || null;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Reset messages
      successMessage?.classList.add('hidden');
      errorMessage?.classList.add('hidden');
      
      // Show loading state
      submitButton.disabled = true;
      if (submitText) submitText.textContent = 'Sending...';
      loadingSpinner?.classList.remove('hidden');
      
      try {
        // Track form submission
        trackEvent('form_submit', { form: 'contact' });
        
        // Prepare form data as JSON
        const formData = new FormData(form);
        const data: Record<string, string | boolean> = {};
        
        // Convert FormData to plain object
        for (const [key, value] of formData.entries()) {
          if (key === 'consent') {
            data[key] = value === 'on';
          } else {
            data[key] = value.toString();
          }
        }
        
        console.log('Submitting form data:', data);
        
        // Submit form data as JSON
        const response = await fetch('/api/contact', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Show success message
          if (successMessage) {
            successMessage.classList.remove('hidden');
            successMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          }
          
          // Reset form
          form.reset();
          
          // Track successful submission
          trackEvent('form_success', { form: 'contact' });
          
          // Redirect if specified
          if (redirectTo) {
            setTimeout(() => {
              window.location.href = redirectTo;
            }, 2000);
          }
        } else {
          throw new Error(result.error || 'Submission failed');
        }
        
      } catch (error) {
        console.error('Form submission error:', error);
        
        // Show error message
        if (errorMessage && errorMessageText) {
          errorMessageText.textContent = error instanceof Error 
            ? error.message 
            : 'Something went wrong. Please try again or contact us directly at support@networkk.in';
          errorMessage.classList.remove('hidden');
          errorMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
        
        // Track error
        trackEvent('form_error', { 
          form: 'contact', 
          error: error instanceof Error ? error.message : 'Unknown error' 
        });
        
      } finally {
        // Reset loading state
        submitButton.disabled = false;
        if (submitText) submitText.textContent = 'Submit Inquiry';
        loadingSpinner?.classList.add('hidden');
      }
    });
  }
</script>