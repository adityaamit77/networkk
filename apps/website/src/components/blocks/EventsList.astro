---
import Heading from '../ui/Heading.astro';
import Button from '../ui/Button.astro';
import Image from '../ui/Image.astro';

export interface Props {
  heading: string;
  description?: string;
  events: Array<{
    title: string;
    date: string;
    time?: string;
    location?: string;
    description: string;
    speakers?: Array<{
      name: string;
      title?: string;
      image?: string;
    }>;
    registrationLink?: string;
    isPast?: boolean;
  }>;
  showPastEvents?: boolean;
}

const {
  heading,
  description,
  events = [],
  showPastEvents = false
} = Astro.props;

// Filter events based on showPastEvents setting
const filteredEvents = showPastEvents ? events : events.filter(event => !event.isPast);

// Sort events by date (most recent first for past events, soonest first for upcoming)
const sortedEvents = [...filteredEvents].sort((a, b) => {
  const dateA = new Date(a.date);
  const dateB = new Date(b.date);
  return showPastEvents ? dateB.getTime() - dateA.getTime() : dateA.getTime() - dateB.getTime();
});
---

<section class="py-16 bg-white">
  <div class="container mx-auto px-4">
    <!-- Header -->
    <div class="text-center mb-12">
      <Heading level={2} class="mb-4">{heading}</Heading>
      {description && <p class="text-xl text-gray-600 max-w-3xl mx-auto">{description}</p>}
    </div>

    <!-- Events List -->
    <div class="max-w-5xl mx-auto space-y-8">
      {sortedEvents.map((event) => (
        <div class="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
          <div class="md:flex">
            <div class="md:flex-shrink-0 bg-primary-50 flex flex-col items-center justify-center p-6 md:w-48">
              {/* Date Display */}
              <div class="text-center">
                <div class="text-4xl font-bold text-primary-600">
                  {new Date(event.date).toLocaleDateString('en-US', { day: 'numeric' })}
                </div>
                <div class="text-lg font-medium text-primary-800">
                  {new Date(event.date).toLocaleDateString('en-US', { month: 'short' })}
                </div>
                <div class="text-sm text-primary-700 mt-1">
                  {new Date(event.date).toLocaleDateString('en-US', { year: 'numeric' })}
                </div>
              </div>
            </div>
            
            <div class="p-6 md:p-8 md:flex-1">
              <Heading level={3} class="mb-2">{event.title}</Heading>
              
              <div class="flex flex-wrap gap-4 mb-4 text-sm text-gray-600">
                {event.time && (
                  <div class="flex items-center">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>{event.time}</span>
                  </div>
                )}
                
                {event.location && (
                  <div class="flex items-center">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    <span>{event.location}</span>
                  </div>
                )}
              </div>
              
              <p class="text-gray-600 mb-6">{event.description}</p>
              
              {/* Speakers */}
              {event.speakers && event.speakers.length > 0 && (
                <div class="mb-6">
                  <p class="text-sm font-medium text-gray-700 mb-3">Speakers:</p>
                  <div class="flex flex-wrap gap-4">
                    {event.speakers.map(speaker => (
                      <div class="flex items-center">
                        {speaker?.image && (
                          <div class="flex-shrink-0 mr-3">
                            <Image 
                              src={speaker?.image} 
                              alt={speaker?.name}
                              width={40}
                              height={40}
                              class="rounded-full object-cover"
                            />
                          </div>
                        )}
                        <div>
                          <p class="font-medium">{speaker?.name}</p>
                          {speaker?.title && <p class="text-sm text-gray-600">{speaker?.title}</p>}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Registration Button */}
              {event.registrationLink && !event.isPast && (
                <Button href={event.registrationLink} variant="primary" size="sm">
                  Register Now
                </Button>
              )}
              
              {/* Past Event Label */}
              {event.isPast && (
                <span class="inline-block bg-gray-100 text-gray-600 text-sm px-3 py-1 rounded-full">
                  Past Event
                </span>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
    
    {/* No Events Message */}
    {sortedEvents.length === 0 && (
      <div class="text-center py-12">
        <p class="text-xl text-gray-600">
          {showPastEvents ? "No past events to display." : "No upcoming events at this time. Check back soon!"}
        </p>
      </div>
    )}
  </div>
</section>