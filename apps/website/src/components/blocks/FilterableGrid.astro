---
import Heading from '../ui/Heading.astro';
import Button from '../ui/Button.astro';
import Image from '../ui/Image.astro';

export interface Props {
  heading: string;
  description?: string;
  filters?: Array<{
    name: string;
    options: Array<{
      label: string;
      value: string;
    }>;
  }>;
  items: Array<{
    title: string;
    description: string;
    image?: string;
    link: string;
    tags?: string[];
    category?: string;
  }>;
  layout?: 'grid' | 'list';
  itemsPerPage?: number;
}

const {
  heading,
  description,
  filters = [],
  items = [],
  layout = 'grid',
  itemsPerPage = 9
} = Astro.props;

const isGrid = layout === 'grid';
---

<section class="py-16 bg-white">
  <div class="container mx-auto px-4">
    <!-- Header -->
    <div class="text-center mb-12">
      <Heading level={2} class="mb-4">{heading}</Heading>
      {description && <p class="text-xl text-gray-600 max-w-3xl mx-auto">{description}</p>}
    </div>

    <!-- Filters -->
    {filters && filters.length > 0 && (
      <div class="mb-10 max-w-5xl mx-auto">
        <div class="flex flex-wrap gap-6 justify-center">
          {filters.map((filter) => (
            <div class="filter-group" data-filter-name={filter.name}>
              <p class="text-sm font-medium text-gray-700 mb-2">{filter.name}:</p>
              <div class="flex flex-wrap gap-2">
                <button 
                  class="filter-btn filter-all-btn bg-primary-600 text-white px-3 py-1 rounded-full text-sm font-medium"
                  data-filter-value="all"
                  data-filter-name={filter.name}
                >
                  All
                </button>
                {filter.options.map((option) => (
                  <button 
                    class="filter-btn bg-gray-100 hover:bg-gray-200 text-gray-800 px-3 py-1 rounded-full text-sm font-medium transition-colors"
                    data-filter-value={option.value}
                    data-filter-name={filter.name}
                  >
                    {option.label}
                  </button>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    )}

    <!-- Grid/List View -->
    <div class="filterable-items-container max-w-6xl mx-auto">
      <div class={`filterable-items ${isGrid ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8' : 'space-y-6'}`}>
        {items.map((item) => {
          const itemDataAttrs = {};
          if (item.category) {
            Object.assign(itemDataAttrs, { 'data-category': item.category });
          }
          if (item.tags && item.tags.length > 0) {
            Object.assign(itemDataAttrs, { 'data-tags': item.tags.join(',') });
          }
          
          return (
            <div 
              class={`filterable-item ${isGrid ? 'bg-white rounded-xl overflow-hidden shadow-sm hover:shadow-xl transition-all duration-300 hover:-translate-y-1' : 'bg-white rounded-xl p-6 shadow-sm hover:shadow-lg transition-all duration-300 flex flex-col md:flex-row gap-6'}`}
              {...itemDataAttrs}
            >
              {item.image && (
                <div class={isGrid ? 'relative h-48 overflow-hidden' : 'relative h-48 md:h-auto md:w-1/3 overflow-hidden rounded-lg'}>
                  <Image
                    src={item.image}
                    alt={item.title}
                    class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                    width={400}
                    height={250}
                  />
                </div>
              )}
              
              <div class={isGrid ? 'p-6' : 'flex-1'}>
                <Heading level={3} class="mb-3">{item.title}</Heading>
                
                {item.category && (
                  <div class="mb-3">
                    <span class="inline-block bg-primary-100 text-primary-800 text-xs px-2 py-1 rounded">
                      {item.category}
                    </span>
                  </div>
                )}
                
                <p class="text-gray-600 mb-4">{item.description}</p>
                
                {item.tags && item.tags.length > 0 && (
                  <div class="flex flex-wrap gap-2 mb-4">
                    {item.tags.map(tag => (
                      <span class="inline-block bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded">
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
                
                <Button href={item.link} variant="outline" size="sm" class="group">
                  View Details
                  <svg class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </Button>
              </div>
            </div>
          );
        })}
      </div>
      
      <!-- Pagination -->
      {items.length > itemsPerPage && (
        <div class="pagination-container mt-12 flex justify-center" data-items-per-page={itemsPerPage}>
          <div class="flex space-x-2">
            <button class="pagination-prev bg-gray-100 hover:bg-gray-200 text-gray-800 px-4 py-2 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed">
              Previous
            </button>
            <div class="pagination-numbers flex space-x-2"></div>
            <button class="pagination-next bg-gray-100 hover:bg-gray-200 text-gray-800 px-4 py-2 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed">
              Next
            </button>
          </div>
        </div>
      )}
      
      <!-- No Results Message -->
      <div class="no-results hidden text-center py-12">
        <p class="text-xl text-gray-600">No items match your filter criteria. Please try different filters.</p>
      </div>
    </div>
  </div>
</section>

<script>
  // Client-side filtering and pagination logic
  document.addEventListener('DOMContentLoaded', () => {
    // Elements
    const filterButtons = document.querySelectorAll('.filter-btn');
    const allFilterButtons = document.querySelectorAll('.filter-all-btn');
    const filterableItems = document.querySelectorAll('.filterable-item');
    const noResultsMessage = document.querySelector('.no-results');
    const paginationContainer = document.querySelector('.pagination-container');
    const paginationNumbers = document.querySelector('.pagination-numbers');
    const prevButton = document.querySelector('.pagination-prev');
    const nextButton = document.querySelector('.pagination-next');
    
    // State
    const activeFilters = {};
    let currentPage = 1;
    const itemsPerPage = paginationContainer ? 
      parseInt(paginationContainer.getAttribute('data-items-per-page') || '9', 10) : 9;
    
    // Initialize
    if (allFilterButtons) {
      allFilterButtons.forEach(btn => {
        const filterName = btn.getAttribute('data-filter-name');
        if (filterName) {
          (activeFilters as Record<string, string>)[filterName] = 'all';
        }
      });
    }
    
    // Set up pagination if needed
    if (paginationContainer && filterableItems.length > itemsPerPage) {
      setupPagination();
    }
    
    // Apply initial filtering and pagination
    applyFiltersAndPagination();
    
    // Event listeners
    filterButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const filterName = btn.getAttribute('data-filter-name');
        const filterValue = btn.getAttribute('data-filter-value');
        
        if (filterName && filterValue) {
          // Update active filter
          (activeFilters as Record<string, string>)[filterName] = filterValue;
          
          // Update UI
          document.querySelectorAll(`[data-filter-name="${filterName}"] .filter-btn`).forEach(button => {
            button.classList.remove('bg-primary-600', 'text-white');
            button.classList.add('bg-gray-100', 'text-gray-800');
          });
          
          btn.classList.remove('bg-gray-100', 'text-gray-800');
          btn.classList.add('bg-primary-600', 'text-white');
          
          // Reset to first page when filter changes
          currentPage = 1;
          
          // Apply filters and update pagination
          applyFiltersAndPagination();
        }
      });
    });
    
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          applyFiltersAndPagination();
        }
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        const totalPages = Math.ceil(getFilteredItems().length / itemsPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          applyFiltersAndPagination();
        }
      });
    }
    
    // Functions
    function getFilteredItems() {
      return Array.from(filterableItems).filter(item => {
        // Check if item matches all active filters
        for (const [filterName, filterValue] of Object.entries(activeFilters)) {
          if (filterValue === 'all') continue;
          
          if (filterName === 'category') {
            const itemCategory = item.getAttribute('data-category');
            if (itemCategory !== filterValue) return false;
          } else if (filterName === 'tags') {
            const itemTags = item.getAttribute('data-tags')?.split(',') || [];
            if (!itemTags.includes(filterValue as string)) return false;
          }
        }
        
        return true;
      });
    }
    
    function applyFiltersAndPagination() {
      const filteredItems = getFilteredItems();
      const totalPages = Math.ceil(filteredItems.length / itemsPerPage);
      
      // Show/hide items based on filters and pagination
      filterableItems.forEach(item => {
        item.classList.add('hidden');
      });
      
      filteredItems.forEach((item, index) => {
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage - 1;
        
        if (index >= startIndex && index <= endIndex) {
          item.classList.remove('hidden');
        }
      });
      
      // Show/hide no results message
      if (filteredItems.length === 0) {
        noResultsMessage?.classList.remove('hidden');
      } else {
        noResultsMessage?.classList.add('hidden');
      }
      
      // Update pagination UI
      updatePaginationUI(totalPages);
    }
    
    function setupPagination() {
      // Initial setup of pagination numbers will be done in updatePaginationUI
      updatePaginationUI(Math.ceil(filterableItems.length / itemsPerPage));
    }
    
    function updatePaginationUI(totalPages: number) {
      if (!paginationContainer) return;
      
      // Update prev/next buttons
      if (prevButton) {
        (prevButton as HTMLButtonElement).disabled = currentPage === 1;
      }
      
      if (nextButton) {
        (nextButton as HTMLButtonElement).disabled = currentPage === totalPages || totalPages === 0;
      }
      
      // Update page numbers
      if (paginationNumbers) {
        paginationNumbers.innerHTML = '';
        
        // Determine which page numbers to show
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, startPage + 4);
        
        // Adjust if we're near the end
        if (endPage - startPage < 4 && startPage > 1) {
          startPage = Math.max(1, endPage - 4);
        }
        
        // Create page number buttons
        for (let i = startPage; i <= endPage; i++) {
          const pageButton = document.createElement('button');
          pageButton.textContent = i.toString();
          pageButton.classList.add(
            'px-3', 'py-1', 'rounded-md', 'text-sm', 'font-medium',
            i === currentPage ? 'bg-primary-600' : 'bg-gray-100',
            i === currentPage ? 'text-white' : 'text-gray-800',
            'hover:bg-gray-200'
          );
          
          pageButton.addEventListener('click', () => {
            currentPage = i;
            applyFiltersAndPagination();
          });
          
          paginationNumbers.appendChild(pageButton);
        }
      }
      
      // Show/hide pagination container
      if (totalPages <= 1) {
        paginationContainer.classList.add('hidden');
      } else {
        paginationContainer.classList.remove('hidden');
      }
    }
  });
</script>