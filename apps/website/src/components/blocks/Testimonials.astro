---
import Heading from '../ui/Heading.astro';
import Image from '../ui/Image.astro';

export interface Props {
  heading?: string;
  description?: string;
  items: Array<{
    quote: string;
    author: {
      name: string;
      title: string;
      company: string;
      image?: string;
    };
    rating?: number;
  }>;
  layout?: 'grid' | 'carousel';
  slider?: boolean;
  theme?: 'default' | 'gold' | 'emerald';
}

const {
  heading,
  description,
  items,
  layout = 'carousel',
  slider = true,
  theme = 'default'
} = Astro.props;

const themeConfig = {
  default: {
    background: 'bg-gradient-to-br from-blue-50 to-indigo-100',
    accent: 'text-blue-600'
  },
  gold: {
    background: 'bg-gradient-to-br from-amber-50 to-yellow-100',
    accent: 'text-amber-600'
  },
  emerald: {
    background: 'bg-gradient-to-br from-emerald-50 to-teal-100',
    accent: 'text-emerald-600'
  }
};

const currentTheme = themeConfig[theme as keyof typeof themeConfig];
---

<section class={`section ${currentTheme.background}`}>
  <div class="container">
    {(heading || description) && (
      <div class="text-center mb-16">
        {heading && (
          <Heading level={2} class="mb-4 text-4xl md:text-5xl font-bold text-gray-900">
            {heading}
          </Heading>
        )}
        {description && (
          <p class="text-xl text-gray-600 max-w-3xl mx-auto">
            {description}
          </p>
        )}
      </div>
    )}

    {layout === 'carousel' && slider ? (
      <!-- Testimonial Carousel -->
      <div class="relative max-w-4xl mx-auto">
        <div class="testimonial-slider overflow-hidden">
          <div class="testimonial-track flex transition-transform duration-700 ease-in-out">
            {items.map((testimonial: Props['items'][0]) => (
              <div class="testimonial-slide min-w-full px-4">
                <div class="bg-white rounded-2xl shadow-xl p-8 md:p-12 relative mx-auto max-w-3xl">
                  <!-- Quote Icon -->
                  <div class={`absolute top-6 left-6 ${currentTheme.accent} opacity-10`}>
                    <svg class="w-16 h-16" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M14.017 21v-7.391c0-5.704 3.731-9.57 8.983-10.609l.995 2.151c-2.432.917-3.995 3.638-3.995 5.849h4v10h-9.983zm-14.017 0v-7.391c0-5.704 3.748-9.57 9-10.609l.996 2.151c-2.433.917-3.996 3.638-3.996 5.849h4v10h-10z"/>
                    </svg>
                  </div>

                  <div class="relative z-10 text-center">
                    <!-- Rating -->
                    {testimonial.rating && (
                      <div class="flex justify-center mb-6">
                        {Array.from({ length: 5 }).map((_, i) => (
                          <svg class={`w-5 h-5 ${i < (testimonial.rating || 0) ? currentTheme.accent : 'text-gray-300'}`} fill="currentColor" viewBox="0 0 20 20">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                          </svg>
                        ))}
                      </div>
                    )}

                    <!-- Quote -->
                    <blockquote class="text-2xl md:text-3xl leading-relaxed text-gray-700 mb-8 font-light italic">
                      "{testimonial.quote}"
                    </blockquote>

                    <!-- Author -->
                    <div class="flex items-center justify-center">
                      {testimonial.author?.image && (
                          <Image
                            src={testimonial.author?.image}
                            alt={testimonial.author?.name}
                            width={64}
                            height={64}
                          class={`w-16 h-16 rounded-full object-cover mr-4 ring-4 ${
                            theme === 'gold' ? 'ring-amber-100' : 
                            theme === 'emerald' ? 'ring-emerald-100' : 
                            'ring-blue-100'
                          }`}
                        />
                      )}
                      <div class="text-left">
                        <div class="font-semibold text-gray-900 text-lg">
                          {testimonial.author?.name}
                        </div>
                        <div class="text-gray-600">
                          {testimonial.author?.title}
                        </div>
                        <div class={`${currentTheme.accent} font-medium`}>
                          {testimonial.author?.company}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Navigation -->
        <div class="flex justify-center items-center mt-8 space-x-4">
          <button class="testimonial-prev w-12 h-12 rounded-full bg-white shadow-lg flex items-center justify-center hover:bg-gray-50 transition-colors group">
            <svg class={`w-6 h-6 text-gray-600 group-hover:${currentTheme.accent}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
          
          <div class="flex space-x-2">
            {items.map((_: Props['items'][0], index: number) => (
              <button 
                class={`testimonial-dot w-3 h-3 rounded-full bg-gray-300 hover:${currentTheme.accent.replace('text-', 'bg-')} transition-colors`}
                data-slide={index}
              ></button>
            ))}
          </div>
          
          <button class="testimonial-next w-12 h-12 rounded-full bg-white shadow-lg flex items-center justify-center hover:bg-gray-50 transition-colors group">
            <svg class={`w-6 h-6 text-gray-600 group-hover:${currentTheme.accent}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
      </div>
    ) : (
      <!-- Grid Layout -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto">
        {items.map((testimonial: Props['items'][0]) => (
          <div class="bg-white rounded-xl p-8 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
            {testimonial.rating && (
              <div class="flex mb-4">
                {Array.from({ length: 5 }).map((_, i) => (
                  <svg class={`w-5 h-5 ${i < (testimonial.rating || 0) ? currentTheme.accent : 'text-gray-300'}`} fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                  </svg>
                ))}
              </div>
            )}
            
            <!-- Quote -->
            <blockquote class="text-gray-700 mb-6 leading-relaxed italic">
              "{testimonial.quote}"
            </blockquote>
            
            <!-- Author -->
            <div class="flex items-center">
              {testimonial.author?.image && (
                <div class="flex-shrink-0 mr-4">
                  <Image
                    src={testimonial.author?.image}
                    alt={`Portrait of ${testimonial.author?.name}`}
                    width={48}
                    height={48}
                    class={`w-12 h-12 rounded-full object-cover ring-2 ${
                      theme === 'gold' ? 'ring-amber-100' : 
                      theme === 'emerald' ? 'ring-emerald-100' : 
                      'ring-blue-100'
                    }`}
                  />
                </div>
              )}
              <div>
                <div class="font-semibold text-gray-900">
                  {testimonial.author?.name}
                </div>
                <div class="text-gray-600 text-sm">
                  {testimonial.author?.title}
                </div>
                <div class={`${currentTheme.accent} text-sm font-medium`}>
                  {testimonial.author?.company}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    )}
  </div>
</section>

{layout === 'carousel' && slider && (
  <script is:inline define:vars={{ theme }}>
    document.addEventListener('DOMContentLoaded', function() {
      const slider = document.querySelector('.testimonial-slider');
      if (!slider) return;
      
      const track = slider.querySelector('.testimonial-track');
      const slides = slider.querySelectorAll('.testimonial-slide');
      const dots = document.querySelectorAll('.testimonial-dot');
      const prevBtn = document.querySelector('.testimonial-prev');
      const nextBtn = document.querySelector('.testimonial-next');
      
      let currentSlide = 0;
      const totalSlides = slides.length;
      
      const themeColors = {
        default: 'bg-blue-600',
        gold: 'bg-amber-600',
        emerald: 'bg-emerald-600'
      };
      
      const activeColor = themeColors[theme] || themeColors.default;
      
      function updateTestimonial() {
        if (!track || !slides[0]) return;
        const firstSlide = slides[0];
        const slideWidth = firstSlide.offsetWidth;
        track.style.transform = `translateX(-${currentSlide * slideWidth}px)`;
        
        // Update dots
        dots.forEach((dot, index) => {
          if (dot) {
            dot.classList.remove('bg-blue-600', 'bg-amber-600', 'bg-emerald-600', 'bg-gray-300');
            if (index === currentSlide) {
              dot.classList.add(activeColor);
            } else {
              dot.classList.add('bg-gray-300');
            }
          }
        });
      }
      
      function nextSlide() {
        currentSlide = (currentSlide + 1) % totalSlides;
        updateTestimonial();
      }
      
      function prevSlide() {
        currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
        updateTestimonial();
      }
      
      // Event listeners
      if (nextBtn) nextBtn.addEventListener('click', nextSlide);
      if (prevBtn) prevBtn.addEventListener('click', prevSlide);
      
      dots.forEach((dot, index) => {
        if (dot) {
          dot.addEventListener('click', () => {
            currentSlide = index;
            updateTestimonial();
          });
        }
      });
      
      // Auto-play
      setInterval(nextSlide, 8000);
      
      // Initialize
      updateTestimonial();
    });
  </script>
)}
