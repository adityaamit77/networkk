---
import Heading from '../ui/Heading.astro';
import Button from '../ui/Button.astro';
import Image from '../ui/Image.astro';
import { trackEvent } from '../../lib/analytics';

export interface Props {
  heading?: string;
  description?: string;
  items: Array<{
    title: string;
    description: string;
    icon?: string;
    image?: string;
    href?: string;
  }>;
  columns?: '2' | '3' | '4';
  backgroundType?: 'light' | 'dark' | 'gradient';
}

const {
  heading,
  description,
  items,
  columns = '3',
  backgroundType = 'light'
} = Astro.props;

const gridClasses: Record<string, string> = {
  '2': 'grid-cols-1 md:grid-cols-2',
  '3': 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
  '4': 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4'
};

const bgClasses: Record<string, string> = {
  light: 'bg-white',
  dark: 'bg-gray-900',
  gradient: 'bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50'
};

const textClasses: Record<string, string> = {
  light: 'text-gray-900',
  dark: 'text-white',
  gradient: 'text-gray-900'
};

// Type-safe accessors
const bgClass = bgClasses[backgroundType as keyof typeof bgClasses] || bgClasses.light;
const textClass = textClasses[backgroundType as keyof typeof textClasses] || textClasses.light;
const gridClass = gridClasses[columns as keyof typeof gridClasses] || gridClasses['3'];
---

<section class={`section ${bgClass}`}>
  <div class="container">
    <!-- Header -->
    {(heading || description) && (
      <div class="text-center max-w-3xl mx-auto mb-16">
        {heading && (
          <Heading level={2} class={`mb-4 ${textClass}`}>
            {heading}
          </Heading>
        )}
        {description && (
          <p class={`text-xl ${backgroundType === 'dark' ? 'text-gray-300' : 'text-gray-600'}`}>
            {description}
          </p>
        )}
      </div>
    )}
    
    <!-- Grid -->
    <div class={`grid ${gridClass} gap-8`}>
      {items.map((item: any) => (
        <div class="bg-white rounded-xl overflow-hidden shadow-sm hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
          {item.image && (
            <div class="relative h-48 overflow-hidden">
              <Image
                src={item.image}
                alt={item.title}
                class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                width={400}
                height={200}
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/10 to-transparent"></div>
            </div>
          )}
          
          <div class="p-6 lg:p-8">
            {item.icon && !item.image && (
              <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-6">
                <span class="text-2xl">{item.icon}</span>
              </div>
            )}
            
            <Heading level={3} class="mb-4 text-gray-900">
              {item.title}
            </Heading>
            
            <p class="text-gray-600 mb-6 leading-relaxed">
              {item.description}
            </p>
            
            {item.href && (
              <Button
                href={item.href}
                variant="outline"
                size="sm"
                class="group"
                onClick={() => trackEvent('tile_click', { title: item.title, href: item.href })}
              >
                Learn More
                <svg class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </Button>
            )}
          </div>
        </div>
      ))}
    </div>
  </div>
</section>
