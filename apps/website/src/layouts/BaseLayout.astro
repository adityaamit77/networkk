---
import SEO from '../components/seo/SEO.astro';
import JsonLd from '../components/seo/JsonLd.astro';
import Footer from '../components/ui/Footer.astro';
import '../styles/global.css';
import { getSiteConfig } from '../lib/content/adapter';

export interface Props {
  title: string;
  description: string;
  canonical?: string;
  noindex?: boolean;
  image?: string;
  keywords?: string[];
  jsonLd?: any;
  titleTemplate?: string;
  showHeader?: boolean;
  showFooter?: boolean;
  footerTheme?: 'default' | 'gold' | 'emerald';
}

const {
  title,
  description,
  canonical = Astro.url.href,
  noindex = false,
  image,
  keywords,
  jsonLd,
  titleTemplate,
  showHeader = true,
  showFooter = true,
  footerTheme = 'default'
} = Astro.props;

interface NavItem {
  label: string;
  href: string;
  cta?: boolean;
}

const siteConfig = await getSiteConfig();
const navItems: NavItem[] = siteConfig.navigation.header;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    
    <SEO
      title={title}
      description={description}
      canonical={canonical}
      noindex={noindex}
      image={image}
      keywords={keywords}
      titleTemplate={titleTemplate}
    />
    
    {jsonLd && <JsonLd data={jsonLd} />}
  </head>
  
  <body>
    <!-- Skip link for accessibility -->
    <a href="#main" class="skip-link">Skip to main content</a>
    
    {showHeader && (
      <header class="sticky top-0 z-50 bg-white/95 backdrop-blur-sm shadow-sm border-b border-gray-100">
        <nav class="container mx-auto px-4 sm:px-6 lg:px-8" aria-label="Main navigation">
          <div class="flex items-center justify-between py-3 md:py-4">
            <!-- Logo -->
            <a href="/" class="flex items-center space-x-3 group focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-blue-600 flex-shrink-0">
              <div class="relative">
                <img src="/logo.png" alt="Networkk Logo" class="h-10 md:h-12 w-auto transition-transform group-hover:scale-105" />
                <div class="absolute inset-0 bg-gradient-to-r from-blue-600/10 to-purple-600/10 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity -z-10"></div>
              </div>
            </a>
            
            <!-- Desktop Navigation -->
            <div class="hidden lg:flex items-center space-x-6 xl:space-x-8">
              {navItems.map((item) => (
                item.cta ? (
                  <a
                    href={item.href}
                    class="bg-blue-600 text-white px-4 xl:px-6 py-2.5 rounded-lg hover:bg-blue-700 transition-all duration-200 font-medium shadow-lg hover:shadow-xl hover:-translate-y-0.5 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-blue-600 whitespace-nowrap"
                  >
                    {item.label}
                  </a>
                ) : (
                  <a
                    href={item.href}
                    class="text-gray-700 hover:text-blue-600 font-medium transition-colors relative after:absolute after:bottom-0 after:left-0 after:h-0.5 after:w-0 after:bg-blue-600 after:transition-all hover:after:w-full focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-blue-600 whitespace-nowrap"
                  >
                    {item.label}
                  </a>
                )
              ))}
            </div>
            
            <!-- Mobile Menu Button -->
            <button 
              id="mobile-menu-button"
              class="lg:hidden p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-blue-600 touch-manipulation" 
              aria-label="Toggle mobile menu"
              aria-expanded="false"
              aria-controls="mobile-menu"
            >
              <svg id="menu-icon" class="w-6 h-6 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
              </svg>
              <svg id="close-icon" class="w-6 h-6 hidden transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <!-- Mobile Menu -->
          <div id="mobile-menu" class="lg:hidden hidden border-t border-gray-200 bg-white shadow-lg overflow-hidden">
            <div class="py-4 space-y-1">
              {navItems.map((item) => (
                item.cta ? (
                  <a
                    href={item.href}
                    class="block mx-4 mt-4 text-center bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 active:bg-blue-800 transition-all duration-200 font-medium shadow-lg hover:shadow-xl transform active:scale-95"
                  >
                    {item.label}
                  </a>
                ) : (
                  <a
                    href={item.href}
                    class="flex px-4 py-3 text-gray-700 hover:text-blue-600 hover:bg-blue-50 active:bg-blue-100 transition-colors font-medium border-l-4 border-transparent hover:border-blue-600 focus:border-blue-600 focus:bg-blue-50 focus:text-blue-600 focus-visible:outline-none min-h-[48px] items-center"
                  >
                    {item.label}
                  </a>
                )
              ))}
            </div>
          </div>
        </nav>
        
        <script>
          // Mobile menu toggle functionality
          document.addEventListener('DOMContentLoaded', function() {
            const mobileMenuButton = document.getElementById('mobile-menu-button');
            const mobileMenu = document.getElementById('mobile-menu');
            const menuIcon = document.getElementById('menu-icon');
            const closeIcon = document.getElementById('close-icon');
            
            if (mobileMenuButton && mobileMenu && menuIcon && closeIcon) {
              mobileMenuButton.addEventListener('click', function() {
                const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
                
                // Toggle menu visibility
                if (isExpanded) {
                  mobileMenu.classList.add('hidden');
                  mobileMenuButton.setAttribute('aria-expanded', 'false');
                  menuIcon.classList.remove('hidden');
                  closeIcon.classList.add('hidden');
                } else {
                  mobileMenu.classList.remove('hidden');
                  mobileMenuButton.setAttribute('aria-expanded', 'true');
                  menuIcon.classList.add('hidden');
                  closeIcon.classList.remove('hidden');
                }
              });
              
              // Close mobile menu when clicking on a link
              const mobileMenuLinks = mobileMenu.querySelectorAll('a');
              mobileMenuLinks.forEach(link => {
                link.addEventListener('click', function() {
                  mobileMenu.classList.add('hidden');
                  mobileMenuButton.setAttribute('aria-expanded', 'false');
                  menuIcon.classList.remove('hidden');
                  closeIcon.classList.add('hidden');
                });
              });
              
              // Close mobile menu when clicking outside
              document.addEventListener('click', function(event) {
                const target = event.target;
                if (target && target instanceof Node && !mobileMenuButton.contains(target) && !mobileMenu.contains(target)) {
                  mobileMenu.classList.add('hidden');
                  mobileMenuButton.setAttribute('aria-expanded', 'false');
                  menuIcon.classList.remove('hidden');
                  closeIcon.classList.add('hidden');
                }
              });
              
              // Close mobile menu on escape key
              document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape' && !mobileMenu.classList.contains('hidden')) {
                  mobileMenu.classList.add('hidden');
                  mobileMenuButton.setAttribute('aria-expanded', 'false');
                  menuIcon.classList.remove('hidden');
                  closeIcon.classList.add('hidden');
                  mobileMenuButton.focus();
                }
              });
            }
          });
        </script>
      </header>
    )}
    
    <main id="main">
      <slot />
    </main>
    
    {showFooter && (
      <Footer theme={footerTheme} />
    )}
  </body>
</html>
