---
import BaseLayout from './BaseLayout.astro';
import Heading from '../components/ui/Heading.astro';
import BlockRenderer from '../components/blocks/BlockRenderer.astro';
import JsonLd from '../components/seo/JsonLd.astro';
import { createOrganizationSchema, createWebsiteSchema, createBreadcrumbSchema } from '../lib/seo';
import { loadPageBySlug } from '../lib/content/adapter';

export interface Props {
  page: {
    slug: string;
    title: string;
    seo: {
      title: string;
      description: string;
      canonical: string;
      noindex?: boolean;
      image?: string;
      keywords?: string[];
    };
    blocks: Array<{
      id: string;
      type: string;
      props: any;
      layout?: any;
      children?: any[];
    }>;
  };
  showPageTitle?: boolean;
  theme?: 'default' | 'gold' | 'emerald';
}

const { page, showPageTitle = true, theme } = Astro.props;

// Ensure seo object exists to avoid runtime errors when pages lack SEO metadata
const seo = page?.seo ?? {};

const themeStyles = {
  default: { headingBg: 'bg-gray-50', headingText: 'text-gray-900' },
  gold: { headingBg: 'bg-amber-50', headingText: 'text-amber-900' },
  emerald: { headingBg: 'bg-emerald-50', headingText: 'text-emerald-900' }
};

const currentTheme = themeStyles[theme ?? 'default'];

// Generate JSON-LD structured data
const organizationSchema = JSON.parse(createOrganizationSchema());
const websiteSchema = JSON.parse(createWebsiteSchema());

const breadcrumbItems = [
  { name: 'Home', url: 'https://networkk.com/' }
];

if (page.slug !== 'home') {
  const segments = page.slug.split('/');
  let accumulated = '';
  for (let i = 0; i < segments.length - 1; i++) {
    accumulated += (i > 0 ? '/' : '') + segments[i];
    const parent = await loadPageBySlug(accumulated);
    if (parent) {
      // parent.seo may be undefined for older content; guard access and provide a sensible fallback
      breadcrumbItems.push({ name: parent.title, url: parent.seo?.canonical ?? `${Astro.url.href}${accumulated}/` });
    }
  }

  breadcrumbItems.push({
    name: page.title,
    url: page.seo?.canonical ?? seo.canonical ?? Astro.url.href
  });
}

const breadcrumbSchema = JSON.parse(createBreadcrumbSchema(breadcrumbItems));

const combinedJsonLd = [
  organizationSchema,
  websiteSchema,
  ...(breadcrumbItems.length > 1 ? [breadcrumbSchema] : [])
];

// Debug logging
console.log('Page object:', page);
console.log('Page SEO:', seo);
console.log('Page SEO image:', seo?.image);
console.log('Page SEO keywords:', seo?.keywords);

// Build props for BaseLayout conditionally
const baseLayoutProps = {
  // Fallback to page.title when seo.title is missing
  title: seo.title ?? page.title,
  description: seo.description ?? '',
  canonical: seo.canonical ?? Astro.url.href,
  noindex: seo.noindex ?? false,
  footerTheme: theme,
  ...(seo?.keywords && { keywords: seo.keywords }),
  ...(seo?.image && { image: seo.image })
};

console.log('BaseLayout props:', baseLayoutProps);
---

<BaseLayout {...baseLayoutProps}>
  <!-- Page-level JSON-LD -->
  <JsonLd data={combinedJsonLd} />
  
  {showPageTitle && page.slug !== 'home' && (
    <section class={`section-sm ${currentTheme.headingBg}`}>
      <div class="container">
        <Heading
          level={1}
          class={`text-center max-w-4xl mx-auto ${currentTheme.headingText}`}
        >
          {page.title}
        </Heading>
      </div>
    </section>
  )}
  
  {page.slug === 'home' && (
    <!-- Special case: Home page H1 comes from hero block -->
    <div class="sr-only">
      <Heading level={1}>{page.title}</Heading>
    </div>
  )}
  
  <!-- Render blocks -->
  {page.blocks.map((block: Props['page']['blocks'][0]) => (
    <BlockRenderer block={block} />
  ))}
</BaseLayout>
